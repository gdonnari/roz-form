{
  "version": 3,
  "sources": ["external-global-plugin:react", "../src/index.js", "../src/FormProvider.jsx", "../src/form.jsx", "../src/input.jsx", "../src/select.jsx", "../src/option_list.jsx", "../src/option.jsx", "../src/textarea.jsx", "../src/submit_button.jsx", "../src/datalist.jsx", "../src/StateValue.js", "../src/ErrorMessage.js"],
  "sourcesContent": ["module.exports = window.React", "export { Provider } from \"./FormProvider.jsx\";\nexport { Form } from \"./form.jsx\";\nexport { Input } from \"./input.jsx\";\nexport { Select } from \"./select.jsx\";\nexport { Textarea } from \"./textarea.jsx\";\nexport { SubmitButton } from \"./submit_button.jsx\";\nexport { Datalist } from \"./datalist.jsx\";\nexport { StateValue } from \"./StateValue.js\";\nexport { ErrorMessage } from \"./ErrorMessage.js\";", "import React from 'react';\r\n\r\nexport const Context = React.createContext(null);\r\n\r\nexport function useFromContext(context, field = false) {\r\n    const ctx = React.useContext(Context);\r\n\r\n    if (field)\r\n        return ctx[context][field];\r\n\r\n    return ctx[context];\r\n}\r\n\r\nexport function useFieldState(field, defaultValue = '') {\r\n    const ctx = React.useContext(Context);\r\n    const state = Object.assign({}, ctx.state[field]) ??  {};\r\n    state.value ??= defaultValue;\r\n    state.error ??= false;\r\n    return state;\r\n}\r\n\r\nfunction init(data) {\r\n    const state = {};\r\n\r\n    for (let key in data) {\r\n\r\n        let value = data[key];\r\n\r\n        if (Array.isArray(value))\r\n            value = [...data[key]];\r\n\r\n        state[key] = {\r\n            value: value,\r\n            error: false\r\n        };\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    const updated = {};\r\n    const componentState = Object.assign({}, state[action.field]) ?? {};\r\n    let value = componentState.value;\r\n    let index = -1;\r\n    let error = false;\r\n\r\n    switch (action.type) {\r\n        case 'setValue':\r\n\r\n            updated[action.field] = {\r\n                value: action.data,\r\n                error: false\r\n            };\r\n            break;\r\n\r\n        case 'addValue':\r\n\r\n            if (Array.isArray(componentState.value))\r\n                value = [...componentState.value];\r\n            else\r\n                value = [];\r\n\r\n            index = value.indexOf(action.data);\r\n\r\n            if (index === -1)\r\n                value.push(action.data);\r\n\r\n            updated[action.field] = {\r\n                value: value,\r\n                error: false\r\n            };\r\n\r\n            break;\r\n\r\n        case 'removeValue':\r\n\r\n            if (Array.isArray(componentState.value))\r\n                value = [...componentState.value];\r\n            else\r\n                value = [];\r\n\r\n            index = value.indexOf(action.data);\r\n\r\n            if (index > -1)\r\n                value.splice(index, 1);\r\n\r\n            updated[action.field] = {\r\n                value: value,\r\n                error: false\r\n            };\r\n            break;\r\n\r\n        case 'setError':\r\n\r\n            let errorMessage = action.data;\r\n\r\n            if (errorMessage === '')\r\n                errorMessage = false;\r\n\r\n            updated[action.field] = componentState;\r\n            updated[action.field].error = errorMessage;\r\n            break;\r\n\r\n        case 'reset':\r\n\r\n            return action.data;\r\n\r\n        default:\r\n            throw Error('Unknown action: ' + action.type);\r\n    }\r\n\r\n    const tmpState = {...state, ...updated};\r\n\r\n    // Set form state to disable or enable submit\r\n    for (let fieldKey in tmpState) {\r\n        if (fieldKey === 'form')\r\n            continue;\r\n        if (tmpState[fieldKey].error) {\r\n            error = true;\r\n            break;\r\n        }\r\n    }\r\n\r\n    updated['form'] = {error: error};\r\n    const newState = {...tmpState, ...updated};\r\n    return newState;\r\n}\r\n\r\nexport function useInvalidHandler(userHandler) {\r\n    const validate = useFromContext('validate');\r\n    const dispatch = useFromContext('dispatch');\r\n\r\n    function handler(e) {\r\n\r\n        if (validate)\r\n            dispatch({\r\n                type: 'setError',\r\n                field: e.target.name,\r\n                data: e.target.validationMessage\r\n            });\r\n\r\n        // Call the user handler\r\n        if (userHandler)\r\n            userHandler(e);\r\n    }\r\n\r\n    return handler;\r\n}\r\n\r\nexport function useChangeHandler(userHandler, validateOnChange = false) {\r\n    const validate = useFromContext('validate');\r\n    const dispatch = useFromContext('dispatch');\r\n\r\n    function handler(e) {\r\n        let action = 'setValue';\r\n        let value = e.target.value;\r\n\r\n        switch (e.target.type) {\r\n            case 'select-multiple':\r\n                value = Array.from(e.target.selectedOptions, option => option.value);\r\n                break;\r\n            case 'checkbox':\r\n\r\n                if (e.target.multiple) {\r\n                    if (e.target.checked)\r\n                        action = 'addValue';\r\n                    else\r\n                        action = 'removeValue';\r\n                } else {\r\n                    if (!e.target.checked)\r\n                        value = '';\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        dispatch({\r\n            type: action,\r\n            field: e.target.name,\r\n            data: value\r\n        });\r\n\r\n        if (validate && validateOnChange && e.target.checkValidity()) {\r\n            dispatch({\r\n                type: 'setError',\r\n                field: e.target.name,\r\n                data: e.target.validationMessage\r\n            });\r\n        }\r\n\r\n        // Call the user handler\r\n        if (userHandler)\r\n            userHandler(e);\r\n    }\r\n\r\n    return handler;\r\n}\r\n\r\nexport function useBlurHandler(userHandler) {\r\n    const onBlurValidate = useFromContext('onBlurValidate');\r\n    const validate = useFromContext('validate');\r\n    const dispatch = useFromContext('dispatch');\r\n\r\n    function handler(e) {\r\n\r\n        if (validate && onBlurValidate && e.target.checkValidity()) {\r\n            dispatch({\r\n                type: 'setError',\r\n                field: e.target.name,\r\n                data: e.target.validationMessage\r\n            });\r\n        }\r\n\r\n        // Call the user handler\r\n        if (userHandler)\r\n            userHandler(e);\r\n    }\r\n\r\n    return handler;\r\n}\r\n\r\nexport function useKeyDownHandler(userHandler) {\r\n    const validate = useFromContext('validate');\r\n    const dispatch = useFromContext('dispatch');\r\n\r\n    function handler(e) {\r\n        // Validate on tab\r\n        if (e.keyCode !== 9)\r\n            return;\r\n\r\n        if (validate && e.target.checkValidity()) {\r\n            dispatch({\r\n                type: 'setError',\r\n                field: e.target.name,\r\n                data: e.target.validationMessage\r\n            });\r\n        }\r\n\r\n        // Call the user handler\r\n        if (userHandler)\r\n            userHandler(e);\r\n    }\r\n\r\n    return handler;\r\n}\r\n\r\nexport function useSubmitHandler(userHandler) {\r\n    const validate = useFromContext('validate');\r\n\r\n    function handler(e) {\r\n        e.preventDefault();\r\n\r\n        if (validate && !e.target.checkValidity())\r\n            return false;\r\n\r\n        // Call the user handler\r\n        if (userHandler) {\r\n            userHandler(e);\r\n            return false;\r\n        }\r\n\r\n        e.target.submit();\r\n    }\r\n\r\n    return handler;\r\n}\r\n\r\nexport function useResetHandler(userHandler) {\r\n    const dispatch = useFromContext('dispatch');\r\n    const initialState = useFromContext('initialState');\r\n\r\n    function handler(e) {\r\n        e.preventDefault();\r\n\r\n        dispatch({\r\n            type: 'reset',\r\n            data: initialState\r\n        });\r\n\r\n        // Call the user handler\r\n        if (userHandler)\r\n            userHandler(e);\r\n    }\r\n\r\n    return handler;\r\n}\r\n\r\nexport function Provider(props) {\r\n    const initialState = init(props.data);\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    const context = {\r\n        initialState: initialState,\r\n        state: state,\r\n        dispatch: dispatch,\r\n        validate: props.validate ?? true,\r\n        onBlurValidate: props.onBlurValidate ?? true,\r\n        invalidClassName: props.invalidClassName ?? 'easyform-invalid'\r\n    };\r\n\r\n    return (<Context.Provider value={context}>\r\n        {props.children}\r\n    </Context.Provider>);\r\n}", "import React from 'react';\nimport * as FormProvider from \"./FormProvider.jsx\";\n\nfunction Form(props) {\n\n    const validate = FormProvider.useFromContext('validate');\n    const submitHandler = FormProvider.useSubmitHandler(props.onSubmit);\n    const resetHandler = FormProvider.useResetHandler(props.onReset);\n\n    // Form\n    const form = Object.assign({}, props) ?? {};\n    form.onSubmit = submitHandler;\n    form.onReset = resetHandler;\n    delete form.children;\n\n    if (validate)\n        form.noValidate = true;\n\n    return (<form {...form}>\n        {props.children}\n    </form>);\n}\n\nexport { Form };", "import React from 'react';\nimport * as FormProvider from \"./FormProvider.jsx\";\n\nfunction Input(props) {\n\n    const changeHandler = FormProvider.useChangeHandler(props.onChange, props.validateOnChange);\n    const invalidHandler = FormProvider.useInvalidHandler(props.onInvalid);\n    const blurHandler = FormProvider.useBlurHandler(props.onBlur);\n\n    let defaultValue = '';\n\n    if (props.multiple)\n        defaultValue = [];\n\n    const state = FormProvider.useFieldState(props.name, defaultValue);\n\n    // Input\n    const input = Object.assign({}, props) ?? {};\n    input.value ??= state.value;\n\n    if (props.type === 'hidden')\n        return (<input {...input} />);\n\n    input.onInvalid = invalidHandler;\n    input.onChange = changeHandler;\n    input.onBlur = blurHandler;\n    input.className ??= '';\n    delete input.validateOnChange;\n\n    const invalidClassName = FormProvider.useFromContext('invalidClassName');\n\n    if (state.error)\n        input.className += ' ' + invalidClassName;\n\n    function getChecked(values) {\n        let count = values.length;\n        for (let i = 0; i < count; i++)\n            if (props.value === values[i])\n                return true;\n\n        return false;\n    }\n\n    if (props.type === 'checkbox') {\n        if (props.multiple) {\n            delete input.onBlur;\n            input.checked = getChecked(state.value);\n        } else {\n            input.checked = (props.value === state.value);\n        }\n    }\n\n    if (props.type === 'radio') {\n        delete input.onBlur;\n        input.checked = (props.value === state.value);\n    }\n\n    return (<input {...input}/>);\n}\n\nexport { Input };", "import React from 'react';\nimport * as FormProvider from \"./FormProvider.jsx\";\nimport { OptionList } from \"./option_list.jsx\";\n\nfunction Select(props) {\n\n    const changeHandler = FormProvider.useChangeHandler(props.onChange);\n    const invalidHandler = FormProvider.useInvalidHandler(props.onInvalid);\n    const blurHandler = FormProvider.useBlurHandler(props.onBlur);\n    let defaultValue = '';\n\n    if (props.multiple)\n        defaultValue = [];\n\n    const state = FormProvider.useFieldState(props.name, defaultValue);\n    let value = state.value;\n\n    if (props.multiple && !Array.isArray(state.value))\n        value = [];\n\n    // Select\n    const select = Object.assign({}, props) ?? {};\n    select.onChange = changeHandler;\n    select.onInvalid = invalidHandler;\n    select.onBlur = blurHandler;\n    select.value ??= value;\n    select.className ??= '';\n\n    const invalidClassName = FormProvider.useFromContext('invalidClassName');\n\n    if (state.error)\n        select.className += ' ' + invalidClassName;\n\n    if (props.options) {\n        delete select.options;\n        return (<select {...select}>\n            <OptionList options={props.options} />\n        </select>);\n    }\n\n    delete select.children;\n\n    return (<select {...select}>\n        {props.children}\n    </select>);\n}\n\nexport { Select };", "import React from 'react';\nimport { Option } from \"./option.jsx\";\n\nfunction OptionList(props) {\n\n    // Options\n    let options = [];\n\n    if (props.options) {\n        options = props.options.map(function (option, index) {\n            const _props = Object.assign({}, option);\n            _props.key = index;\n            return (<Option {..._props}/>);\n        });\n    }\n\n    return options;\n}\n\nexport { OptionList };", "import React from 'react';\n\nfunction Option(props) {\n\n    // Option\n    const option = Object.assign({}, props) ?? {};\n    delete option.text;\n\n    if (props.text)\n        return (<option {...option}>{props.text}</option>);\n\n    return (<option {...option} />);\n}\n\nexport { Option };", "import React from 'react';\nimport * as FormProvider from \"./FormProvider.jsx\";\n\nfunction Textarea(props) {\n\n    const changeHandler = FormProvider.useChangeHandler(props.onChange);\n    const invalidHandler = FormProvider.useInvalidHandler(props.onInvalid);\n    const blurHandler = FormProvider.useBlurHandler(props.onBlur);\n    const state = FormProvider.useFieldState(props.name);\n\n    // Textarea\n    const textarea = Object.assign({}, props) ?? {};\n    textarea.onChange = changeHandler;\n    textarea.onInvalid = invalidHandler;\n    textarea.onBlur = blurHandler;\n    textarea.value ??= state.value;\n    textarea.className ??= '';\n\n    const invalidClassName = FormProvider.useFromContext('invalidClassName');\n\n    if (state.error)\n        textarea.className += ' ' + invalidClassName;\n\n    return (<textarea {...textarea}/>);\n}\n\nexport { Textarea };", "import React from 'react';\nimport * as FormProvider from \"./FormProvider.jsx\";\n\nfunction SubmitButton(props) {\n\n    const state = FormProvider.useFieldState('form');\n\n    // button\n    const button = Object.assign({}, props) ?? {};\n    button.type ??= 'submit';\n    button.disabled = state.error;\n    delete button.children;\n\n    return (<button {...button}>{props.children}</button>);\n}\n\nexport { SubmitButton };", "import React from 'react';\nimport { OptionList } from \"./option_list.jsx\";\n\nfunction Datalist(props) {\n\n    const datalist = Object.assign({}, props) ?? {};\n    datalist.id ??= props.name;\n\n    if (props.options) {\n        delete datalist.options;\n        return (<datalist {...datalist}>\n            <OptionList options={props.options} />\n        </datalist>);\n    }\n\n    delete datalist.children;\n\n    return (<datalist {...datalist}>\n        {props.children}\n    </datalist>);\n}\n\nexport { Datalist };", "import * as FormProvider from \"./FormProvider.jsx\";\n\nfunction StateValue(props) {\n    const state = FormProvider.useFieldState(props.forInput);\n\n    if (typeof props.display === 'function')\n        return props.display(state.value);\n\n    return state.value;\n}\n\nexport { StateValue };", "import * as FormProvider from \"./FormProvider.jsx\";\n\nfunction ErrorMessage(props) {\n    const state = FormProvider.useFieldState(props.forInput);\n    return state.error;\n}\n\nexport { ErrorMessage };"],
  "mappings": "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",
  "names": ["require_react", "__commonJSMin", "exports", "module", "src_exports", "__export", "Datalist", "ErrorMessage", "Form", "Input", "Provider", "Select", "StateValue", "SubmitButton", "Textarea", "import_react", "Context", "React", "useFromContext", "context", "field", "ctx", "useFieldState", "defaultValue", "state", "init", "data", "key", "value", "reducer", "action", "updated", "componentState", "index", "error", "errorMessage", "tmpState", "fieldKey", "useInvalidHandler", "userHandler", "validate", "dispatch", "handler", "e", "useChangeHandler", "validateOnChange", "option", "useBlurHandler", "onBlurValidate", "useSubmitHandler", "userHandler", "validate", "useFromContext", "handler", "e", "useResetHandler", "dispatch", "initialState", "Provider", "props", "init", "state", "React", "reducer", "context", "Context", "import_react", "Form", "props", "validate", "useFromContext", "submitHandler", "useSubmitHandler", "resetHandler", "useResetHandler", "form", "React", "import_react", "Input", "props", "changeHandler", "useChangeHandler", "invalidHandler", "useInvalidHandler", "blurHandler", "useBlurHandler", "defaultValue", "state", "useFieldState", "input", "React", "invalidClassName", "useFromContext", "getChecked", "values", "count", "i", "import_react", "import_react", "import_react", "Option", "props", "option", "React", "OptionList", "props", "options", "option", "index", "_props", "React", "Option", "Select", "props", "changeHandler", "useChangeHandler", "invalidHandler", "useInvalidHandler", "blurHandler", "useBlurHandler", "defaultValue", "state", "useFieldState", "value", "select", "invalidClassName", "useFromContext", "React", "OptionList", "import_react", "Textarea", "props", "changeHandler", "useChangeHandler", "invalidHandler", "useInvalidHandler", "blurHandler", "useBlurHandler", "state", "useFieldState", "textarea", "invalidClassName", "useFromContext", "React", "import_react", "SubmitButton", "props", "state", "useFieldState", "button", "React", "import_react", "Datalist", "props", "datalist", "React", "OptionList", "StateValue", "props", "state", "useFieldState", "ErrorMessage", "props", "useFieldState"]
}
